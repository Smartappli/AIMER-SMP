name: CI
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: coverage-${{ github.event_name == 'pull_request' && format('{0}-{1}', github.workflow, github.event.pull_request.number) || github.workflow_ref }}
  cancel-in-progress: true
  
jobs:
  Pytest:
    name: Pytest - Unit Tests
    strategy:
      max-parallel: 5
      matrix:
        os: [macos-12, macos-13, macos-14, ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, windows-2019, windows-2022]
        python-version: ["3.10", "3.11"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          python -m uv pip install pytest
          python -m uv pip install -r requirements.txt
           
      - name: Coverage Tests
        run: | 
          python -m pytest tests/ --verbose
          
  Ruff:
    name: Ruff - Linter
    strategy:
      max-parallel: 5
      matrix:
        os: [macos-12, macos-13, macos-14, ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, windows-2019, windows-2022]
        python-version: ["3.10", "3.11"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Run ruff check
        uses: chartboost/ruff-action@v1
        with:
          src: "."
          args: "check --select C90,E,F,I,NPY,PD,PERF,RUF,S,SIM,UP,W --output-format github --diff --verbose"

  Flake8:
    name: Flake8 - Linter
    strategy:
      max-parallel: 5
      matrix:
        os: [macos-12, macos-13, macos-14, ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, windows-2019, windows-2022]
        python-version: ["3.10", "3.11"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          update-pip: "true"
          # exclude: ""
          # ignore: ""
          max-line-length: "80"
          plugins: "flake8-builtins flake8-commas flake8-errmsg flake8-fixme  pep8-naming flake8-pie flake8-use-pathlib flake8-return flake8-type-checking flake8-todo flake8-tidy-imports flake8-bugbear flake8-django flake8-bandit TorchFix pandas-vet flake8-logging-format flake8-requirements"

  Pylint:
    name: PyLint - Linter
    strategy:
      max-parallel: 5
      matrix:
        os: [macos-12, macos-13, macos-14, ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, windows-2019, windows-2022]
        python-version: ["3.10", "3.11"]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      if: ${{ matrix.os == 'macos-12' || matrix.os == 'macos-13' || matrix.os == 'macos-14' }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        python -m uv pip install pylint
        python -m uv pip install -r requirements.txt
        
    - name: Install dependencies on Windows
      if: ${{ matrix.os == 'windows-2019' || matrix.os == 'windows-2022' }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        python -m uv pip install pylint
        python -m uv pip install -r requirements.txt
        
    - name: Install dependencies on Ubuntu
      if: ${{ matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04' }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        python -m uv pip install pylint
        python -m uv pip install -r requirements.txt
        
    - name: Analysing the code with pylint
      run: pylint "**/*.py"

  Black:
    name: Black - Code Formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
       
      - name: Check files using the black formatter
        uses: rickstaa/action-black@v1
        id: action_black
        with:
          black_args: ". --line-length 80 -t py310 -t py311 -t py312"
          
      - name: Create Pull Request
        if: steps.action_black.outputs.is_formatted == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Format Python code with psf/black push"
          commit-message: ":art: Format Python code with psf/black"
          body: |
            There appear to be some python formatting errors in ${{ github.sha }}. This pull request
            uses the [psf/black](https://github.com/psf/black) formatter to fix these issues.
          base: ${{ github.head_ref }} # Creates pull request onto pull request or commit branch
          branch: black

  Bandit:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Bandit - Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: 'pip' # caching pip dependencies
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install bandit[sarif] uv
          python -m uv pip install -r requirements.txt     

      # Execute Bandit
      - name: Run Bandit CLI
        run: |
          python -m bandit -r main.py -v --format sarif -o results.sarif

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
      
